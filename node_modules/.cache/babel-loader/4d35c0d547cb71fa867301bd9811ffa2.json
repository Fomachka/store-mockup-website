{"ast":null,"code":"import { LOAD_PRODUCTS, SET_LISTVIEW, SET_GRIDVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from \"../actions\";\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    let maxPrice = action.payload.map(product => product.price); // maxPrice = Math.max(...maxPrice);\n\n    if (maxPrice.length > 0) {\n      maxPrice = maxPrice.reduce((acc, val) => acc > val ? acc : val);\n    }\n\n    return { ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: { ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice\n      }\n    };\n  }\n\n  if (action.type === SET_LISTVIEW) {\n    return { ...state,\n      grid_view: false\n    };\n  }\n\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state,\n      grid_view: true\n    };\n  }\n\n  if (action.type === UPDATE_SORT) {\n    return { ...state,\n      sort: action.payload\n    };\n  }\n\n  if (action.type === SORT_PRODUCTS) {\n    const {\n      sort,\n      filtered_products\n    } = state;\n    let tempProduct = [];\n\n    if (sort === \"price-lowest\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        return a.price - b.price;\n      });\n    }\n\n    if (sort === \"price-highest\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        return b.price - a.price;\n      });\n    }\n\n    if (sort === \"name-a\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n      });\n    }\n\n    if (sort === \"name-z\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        if (a.name > b.name) {\n          return -1;\n        }\n      });\n    }\n\n    return { ...state,\n      filtered_products: tempProduct\n    };\n  }\n\n  if (action.type === UPDATE_FILTERS) {\n    const {\n      name,\n      value\n    } = action.payload;\n    return { ...state,\n      filters: { ...state.filters,\n        [name]: value\n      }\n    };\n  }\n\n  if (action.type === FILTER_PRODUCTS) {\n    const {\n      all_products\n    } = state;\n    const {\n      text,\n      category,\n      company,\n      color,\n      price,\n      shipping\n    } = state.filters;\n    let tempProducts = [...all_products];\n    console.log(tempProducts); // when text is empty ignore it and pass and display all products back\n\n    if (text) {\n      tempProducts = tempProducts.filter(product => {\n        return product.name.toLowerCase().startsWith(text);\n      });\n    }\n\n    if (category !== \"all\") {\n      // if (category === \"all\") {\n      //   return { ...state, filters: tempProducts };\n      // }\n      tempProducts = tempProducts.filter(product => {\n        return product.category === category;\n      });\n    }\n\n    if (company !== \"all\") {\n      tempProducts = tempProducts.filter(product => {\n        return product.company === company;\n      });\n    }\n\n    if (color !== \"all\") {\n      tempProducts = tempProducts.filter(product => {\n        return product.colors.includes(color);\n      });\n    }\n\n    if (price) {\n      tempProducts = tempProducts.filter(product => {\n        return product.price <= price;\n      });\n    }\n\n    if (shipping) {\n      tempProducts = tempProducts.filter(product => {\n        return product.shipping === true;\n      });\n    }\n\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === CLEAR_FILTERS) {\n    return { ...state,\n      filters: { ...state.filters,\n        text: \"\",\n        company: \"all\",\n        category: \"all\",\n        color: \"all\",\n        price: state.filters.max_price,\n        shipping: false\n      }\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;","map":{"version":3,"sources":["/Users/fomachka/Documents/My React Projects/shopping-app/src/reducers/filter_reducer.js"],"names":["LOAD_PRODUCTS","SET_LISTVIEW","SET_GRIDVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","filter_reducer","state","action","type","maxPrice","payload","map","product","price","length","reduce","acc","val","all_products","filtered_products","filters","max_price","grid_view","sort","tempProduct","a","b","name","value","text","category","company","color","shipping","tempProducts","console","log","filter","toLowerCase","startsWith","colors","includes","Error"],"mappings":"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","sourcesContent":["import {\n  LOAD_PRODUCTS,\n  SET_LISTVIEW,\n  SET_GRIDVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from \"../actions\";\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    let maxPrice = action.payload.map((product) => product.price);\n    // maxPrice = Math.max(...maxPrice);\n    if (maxPrice.length > 0) {\n      maxPrice = maxPrice.reduce((acc, val) => (acc > val ? acc : val));\n    }\n\n    return {\n      ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: {\n        ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice,\n      },\n    };\n  }\n  if (action.type === SET_LISTVIEW) {\n    return { ...state, grid_view: false };\n  }\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state, grid_view: true };\n  }\n  if (action.type === UPDATE_SORT) {\n    return { ...state, sort: action.payload };\n  }\n\n  if (action.type === SORT_PRODUCTS) {\n    const { sort, filtered_products } = state;\n    let tempProduct = [];\n    if (sort === \"price-lowest\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        return a.price - b.price;\n      });\n    }\n    if (sort === \"price-highest\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        return b.price - a.price;\n      });\n    }\n    if (sort === \"name-a\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n      });\n    }\n    if (sort === \"name-z\") {\n      tempProduct = filtered_products.sort((a, b) => {\n        if (a.name > b.name) {\n          return -1;\n        }\n      });\n    }\n    return { ...state, filtered_products: tempProduct };\n  }\n\n  if (action.type === UPDATE_FILTERS) {\n    const { name, value } = action.payload;\n    return { ...state, filters: { ...state.filters, [name]: value } };\n  }\n\n  if (action.type === FILTER_PRODUCTS) {\n    const { all_products } = state;\n    const { text, category, company, color, price, shipping } = state.filters;\n    let tempProducts = [...all_products];\n    console.log(tempProducts);\n    // when text is empty ignore it and pass and display all products back\n    if (text) {\n      tempProducts = tempProducts.filter((product) => {\n        return product.name.toLowerCase().startsWith(text);\n      });\n    }\n    if (category !== \"all\") {\n      // if (category === \"all\") {\n      //   return { ...state, filters: tempProducts };\n      // }\n      tempProducts = tempProducts.filter((product) => {\n        return product.category === category;\n      });\n    }\n    if (company !== \"all\") {\n      tempProducts = tempProducts.filter((product) => {\n        return product.company === company;\n      });\n    }\n\n    if (color !== \"all\") {\n      tempProducts = tempProducts.filter((product) => {\n        return product.colors.includes(color);\n      });\n    }\n    if (price) {\n      tempProducts = tempProducts.filter((product) => {\n        return product.price <= price;\n      });\n    }\n    if (shipping) {\n      tempProducts = tempProducts.filter((product) => {\n        return product.shipping === true;\n      });\n    }\n\n    return { ...state, filtered_products: tempProducts };\n  }\n  if (action.type === CLEAR_FILTERS) {\n    return {\n      ...state,\n      filters: {\n        ...state.filters,\n        text: \"\",\n        company: \"all\",\n        category: \"all\",\n        color: \"all\",\n        price: state.filters.max_price,\n        shipping: false,\n      },\n    };\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;\n"]},"metadata":{},"sourceType":"module"}